// –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CoinGecko API - –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ BNB Chain
// –ó–∞–ø—É—Å–∫: node 2-verify-with-coingecko.js COINGECKO_API_KEY CMC_API_KEY

import https from 'https';
import fs from 'fs';

const COINGECKO_API_KEY = process.argv[2];
const CMC_API_KEY = process.argv[3];

if (!COINGECKO_API_KEY || !CMC_API_KEY) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–±–∞ API –∫–ª—é—á–∞: node 2-verify-with-coingecko.js COINGECKO_KEY CMC_KEY');
  process.exit(1);
}

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
if (!fs.existsSync('binance-alpha-bnb.json')) {
  console.error('‚ùå –§–∞–π–ª binance-alpha-bnb.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node 1-get-binance-alpha-bnb.js YOUR_API_KEY');
  process.exit(1);
}

const data = JSON.parse(fs.readFileSync('binance-alpha-bnb.json', 'utf-8'));
const tokens = data.tokens;

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ CoinGecko API...\n');
console.log('–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', tokens.length);
console.log('–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (CoinGecko –∏–º–µ–µ—Ç rate limit)...\n');

let checkedCount = 0;
let bnbOnlyTokens = [];
let multiChainTokens = [];
let notFoundTokens = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ CMC API v2
function getCMCTokenInfo(slug) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'pro-api.coinmarketcap.com',
      path: `/v2/cryptocurrency/info?slug=${slug}`,
      method: 'GET',
      headers: {
        'X-CMC_PRO_API_KEY': CMC_API_KEY,
        'Accept': 'application/json'
      }
    };

    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          if (json.data) {
            const coinData = Object.values(json.data)[0];
            resolve(coinData);
          } else {
            resolve(null);
          }
        } catch (error) {
          resolve(null);
        }
      });
    });

    req.on('error', () => resolve(null));
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ CoinGecko –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å—É
function checkTokenOnCoinGecko(token) {
  return new Promise((resolve) => {
    const contractAddress = token.platform.token_address;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å—É
    const options = {
      hostname: 'api.coingecko.com',
      path: `/api/v3/coins/binance-smart-chain/contract/${contractAddress}?x_cg_demo_api_key=${COINGECKO_API_KEY}`,
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'x-cg-demo-api-key': COINGECKO_API_KEY
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        checkedCount++;
        
        try {
          if (res.statusCode === 404) {
            console.log(`‚ùì [${checkedCount}/${tokens.length}] ${token.symbol} - –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ CoinGecko`);
            notFoundTokens.push(token);
            resolve();
            return;
          }

          const coinData = JSON.parse(responseData);
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
          const platforms = coinData.platforms || {};
          const platformNames = Object.keys(platforms).filter(p => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
            const address = platforms[p];
            return address && address !== '' && address.length > 0;
          });
          
          if (platformNames.length === 0) {
            console.log(`‚ùì [${checkedCount}/${tokens.length}] ${token.symbol} - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö`);
            notFoundTokens.push(token);
          } else if (platformNames.length === 1 && 
                     (platformNames[0].includes('binance') || 
                      platformNames[0].includes('bsc') || 
                      platformNames[0] === 'binance-smart-chain')) {
            // CoinGecko –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ BNB Chain
            // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ CMC API v2
            console.log(`   ‚îî‚îÄ CoinGecko: ${platformNames[0]} ‚úÖ`);
            console.log(`   ‚îî‚îÄ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ CMC...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ CMC
            getCMCTokenInfo(token.slug).then(cmcData => {
              if (!cmcData) {
                console.log(`   ‚îî‚îÄ CMC: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
                multiChainTokens.push({
                  ...token,
                  coingecko_id: coinData.id,
                  platforms: platformNames,
                  platformCount: platformNames.length,
                  platform_addresses: platforms,
                  reason: 'CMC data unavailable'
                });
                console.log(`‚ö†Ô∏è  [${checkedCount}/${tokens.length}] ${token.symbol} - –ú—É–ª—å—Ç–∏ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö CMC)`);
                resolve();
                return;
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ contract_address
              const contractAddresses = Array.isArray(cmcData.contract_address) 
                ? cmcData.contract_address 
                : [cmcData.contract_address];
              
              const cmcPlatforms = contractAddresses
                .filter(ca => ca && ca.platform)
                .map(ca => ({
                  id: ca.platform.coin?.id,
                  name: ca.platform.name
                }));

              console.log(`   ‚îî‚îÄ CMC –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${cmcPlatforms.map(p => `${p.name} (ID: ${p.id})`).join(', ')}`);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –í–°–ï –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ CMC - —ç—Ç–æ —Ç–æ–ª—å–∫–æ BNB Chain (ID 1839)
              const onlyBNBinCMC = cmcPlatforms.length > 0 && 
                                   cmcPlatforms.every(p => p.id === '1839' || p.id === 1839);

              if (onlyBNBinCMC) {
                bnbOnlyTokens.push({
                  ...token,
                  coingecko_id: coinData.id,
                  platforms: platformNames,
                  platform_addresses: platforms,
                  cmc_platforms: cmcPlatforms
                });
                console.log(`‚úÖ [${checkedCount}/${tokens.length}] ${token.symbol} - –¢–û–õ–¨–ö–û BNB (–æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç)`);
              } else {
                multiChainTokens.push({
                  ...token,
                  coingecko_id: coinData.id,
                  platforms: platformNames,
                  platformCount: platformNames.length,
                  platform_addresses: platforms,
                  cmc_platforms: cmcPlatforms,
                  reason: 'CMC shows multiple chains'
                });
                console.log(`‚ö†Ô∏è  [${checkedCount}/${tokens.length}] ${token.symbol} - –ú—É–ª—å—Ç–∏ (CMC: ${cmcPlatforms.map(p => p.name).join(', ')})`);
              }
              
              resolve();
            }).catch(err => {
              console.log(`   ‚îî‚îÄ CMC: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - ${err.message}`);
              multiChainTokens.push({
                ...token,
                coingecko_id: coinData.id,
                platforms: platformNames,
                platformCount: platformNames.length,
                platform_addresses: platforms,
                reason: 'CMC request failed'
              });
              console.log(`‚ö†Ô∏è  [${checkedCount}/${tokens.length}] ${token.symbol} - –ú—É–ª—å—Ç–∏ (–æ—à–∏–±–∫–∞ CMC)`);
              resolve();
            });
          } else {
            // –ú—É–ª—å—Ç–∏-—á–µ–π–Ω –≤ CoinGecko
            console.log(`   ‚îî‚îÄ CoinGecko platforms: ${platformNames.join(', ')}`);
            multiChainTokens.push({
              ...token,
              coingecko_id: coinData.id,
              platforms: platformNames,
              platformCount: platformNames.length,
              platform_addresses: platforms
            });
            console.log(`‚ö†Ô∏è  [${checkedCount}/${tokens.length}] ${token.symbol} - –ú—É–ª—å—Ç–∏ (${platformNames.length} chains –≤ CoinGecko)`);
            resolve();
          }
        } catch (error) {
          console.error(`‚ùå [${checkedCount}/${tokens.length}] ${token.symbol} - –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:`, error.message);
          notFoundTokens.push(token);
          resolve();
        }
      });
    });

    req.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ${token.symbol}:`, error.message);
      checkedCount++;
      notFoundTokens.push(token);
      resolve();
    });

    req.end();
  });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (CoinGecko Demo API: 30 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É)
async function checkAllTokens() {
  for (let i = 0; i < tokens.length; i++) {
    await checkTokenOnCoinGecko(tokens[i]);
    // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è Demo API)
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('‚îÄ'.repeat(60));
  console.log('–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:', checkedCount);
  console.log('–¢–æ–ª—å–∫–æ BNB Chain:', bnbOnlyTokens.length);
  console.log('–ú—É–ª—å—Ç–∏-—á–µ–π–Ω:', multiChainTokens.length);
  console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ CoinGecko:', notFoundTokens.length);
  console.log('–ü—Ä–æ—Ü–µ–Ω—Ç BNB-only:', ((bnbOnlyTokens.length / checkedCount) * 100).toFixed(1) + '%');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const result = {
    timestamp: new Date().toISOString(),
    total_checked: checkedCount,
    bnb_only_count: bnbOnlyTokens.length,
    multi_chain_count: multiChainTokens.length,
    not_found_count: notFoundTokens.length,
    bnb_only_tokens: bnbOnlyTokens,
    multi_chain_tokens: multiChainTokens,
    not_found_tokens: notFoundTokens
  };

  const filename = 'verified-bnb-only-coingecko.json';
  fs.writeFileSync(filename, JSON.stringify(result, null, 2));
  console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', filename);

  // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ BNB
  if (bnbOnlyTokens.length > 0) {
    console.log('\nüéØ –¢–û–ö–ï–ù–´ –¢–û–õ–¨–ö–û –ù–ê BNB CHAIN:');
    console.log('‚îÄ'.repeat(60));
    bnbOnlyTokens.forEach((token, i) => {
      console.log(`${i + 1}. ${token.name} (${token.symbol})`);
    });
  }
}

checkAllTokens().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
